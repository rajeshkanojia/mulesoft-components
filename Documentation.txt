Module Name : Scatter Gather Module
URL : http://localhost:8081/user/{id}
	  id -  ASJ80SPW6GW | QYO02IHJ4CT | PKX71MDR7TX | XMC46BJB8RT | KLY23XPY8BA | RIS45QSH4NG | PDH21WYL3QN | RMO23FNM8ZE | UPQ74SZR4GJ | JLR04AMT4SR | CFN06GBY7EB | ZQX26APL1AT | OLT25NPY3UK | MCB21QLB4BY | MJK16RRR2OH	
Method Type : GET
Connector and Component used:
	Scatter-Gather
	HTTP
	File
	Transformation
Module Description : 
	We have total 7 csv file stores different details of a user.
		User Details - details of user the user. fields(id, name, email, phone, etc)
		Transaction - transaction history of user. fields(userid, transaction, date)
		Songs - song history of user. fields(userid, song, date)
		Movie - movie history of user. fields(userid, title, date)  
		Medication - medication history of user. fields(userid, medication, date)  
		Drink - drink history of user. fields(userid, drink, date)  
		Book - book history of user. fields(userid, book, date)  

	In this project we are simply passing the id of the user in URL and application collect all the related information from these seven file base on user id.	


	We haven't manage any kind of error/exception in the application so if you mistype the ID it will show you error message.
	


Important takeaway :
	How scatter-gather works
	Mapping of DW function
	How selector works
	How final output looks just after scatter-gather and how to handle it.

Extra : We can change the format of final response to XML by simply wraping the final transformation output in [] and add a HTTP Request connector and configure it for http://localhost:8081/dynamic-evaluate?format=xml 

***********************************************************************************************************************************************
Module Name : Dynamic Evaluate Component
URL : http://localhost:8081/dynamic-evaluate?format=xml
Method Type : POST
Connector and Component used:
	Dynamic Evaluator
	HTTP
Module Description : 
	In this dummy project the response format is depend on the format passed in query parameter. ex:-
	for xml - http://localhost:8081/dynamic-evaluate?format=xml
	for json - http://localhost:8081/dynamic-evaluate?format=json
	for csv - http://localhost:8081/dynamic-evaluate?format=csv		

	This project is design for Array of objects it will fail if you pass single object with []

	Input payload example:

	[{
		"key1" : "value1",
		"key2" : "value2",
		"key3" : "value3",
		"key4" : "value4",
		"key5" : "value5",
		"key6" : "value6",
		"key7" : "value7",
		"key8" : "value8",
		-
		-
		-
	}]


Important takeaway :
	How scheduler works
	Mime Type in readUrl() must be "text/plain" otherwise it will give error 

***********************************************************************************************************************************************
Module Name : Batch-job
URL : http://localhost:8081/transaction
Method Type : GET 
Connector and Component uses: 
	Batch job component
	File
	Dataweave
	Object Store
Module Description :
	We have 2 csv files names
	transaction-data.csv - stores the card transaction details of a user. fields(transactionID, accountNumber, cardNumber, transactionStatus, amount, data)
	transaction-user-data.csv - stores the user details. fields(accountNumber, cardNumber, name, email, address, etc)

	In first phase I simply store the user data in Object store(we can also use database) by making cardNumber as object key.

	In second phase batch job simply iterate over payload and write the output on file(resources/output), i use transactionStaus value(success/fail) in Accept Expression to filter out the data.

	1st batch job store all the success transaction records.
	2nd batch job store all the failed transaction records.
	3rd batch job store all the error transaction records.

	Note:- We can also send email to the user to notify them about the transaction.

Dataweave functions used :
	Mule::lookup
	-- operator on Json Object
	store transform message content in dwl file.

Important takeaway :
	How to call Mule component from dataweave through Mule::lookup()
	How Object store works
	How Batch job works

***********************************************************************************************************************************************
Module Name : Choice Router : Dataweave
URL : http://localhost:8081/dataweave/*
Method Type : GET 
Connector and Component uses: 
	Choice Router
	Dataweave
Module Description :
	We have Sales data csv file at location resources/sample-data, application reading this file in transform message component through 
		readUrl("classpath://sample-data/sales-data.csv", "application/csv")
	Based on uri value application generating json output accordingly, uri values are:
		product-wise-sales
		total-sale-product-wise
		customer-wise-sale
		country-wise-sale

Dataweave functions used :
	groupBy
	pluck
	map
	splitBy
	filter
	readUrl
	chaining of various functions			

Important takeaway :
	How choice router works
	How to store dataweave code in seperate dwl file and link with Transform message component.

***********************************************************************************************************************************************
Module Name : Scheduler
URL : Replace the HTTP Listner with Scheduler and set the cron for 2-3 seconds.
Method Type : 
Connector and Component used:
	Scheduler
	Object Store
	HTTP
	File
Module Description : 
	In this dummy project I am reading a json file (location : resources/sample-data/user-data.json) which contains user data like.
	{
		"name": "Quinn Jackson",
		"phone": "1-385-262-4786",
		"email": quinnjackson@yopmail.com,
		"address": "P.O. Box 779, 7458 Egestas Av.",
		"postalZip": "23W 7S7",
		"region": "Huáběi",
		"country": "Costa Rica"
	},  

 
    My scheduler fetch single object in every 2 seconds from the file and send it to http://localhost:8081/listener through HTTP Request connector. To track the index number I use Object store. At HTTP Listener connector end which is working as receiver, simply receive the payload and store it in json file with specific country name under resources/output folder.

Important takeaway :
	How scheduler works
	How to maintain state using Object store

